// This Pine ScriptÂ® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Sparked0x Released under Viral Public License

//@version=6
indicator("Sparked Beta v.03", shorttitle="Sparked", overlay=true, max_boxes_count=500, max_lines_count=500)

//Todo


// =============================
// === Inputs
// =============================

// Supply/Demand Zones Section
var group_sd = "Supply/Demand Zones"
sdLen      = input.int(20, "Swing Length", minval=1, group=group_sd, tooltip="Controls zone sensitivity: Lower = more zones (scalping), Higher = fewer zones (swing trading). Looks for highest/lowest in (length*2+1) bar window.")
sdHTF1     = input.timeframe("60", "Higher Timeframe 1", group=group_sd, tooltip="First higher timeframe for additional zone analysis. Zones from this TF will appear as dashed lines.")
sdHTF2     = input.timeframe("1440", "Higher Timeframe 2", group=group_sd, tooltip="Second higher timeframe for additional zone analysis. Zones from this TF will appear as dashed lines.")
showSD     = input.bool(true, "Show Supply/Demand Zones", group=group_sd, tooltip="Toggle to show/hide all supply and demand zones on the chart.")
srFullRange  = input.bool(true, "SR Use Full Swing Range", group=group_sd, tooltip="Use full swing range (high to low) for zone height. Disable for half-range zones.")
srExtendBars = input.int(5000, "SR Extend Bars", minval=100, group=group_sd, tooltip="How many bars to the right supply/demand zones should extend. Max 500 due to TradingView limits.")

// Zone Management Section
var group_zm = "Zone Management"
touchCount     = input.bool(false, "Enable Touch Count", group=group_zm, tooltip="Mark zones that have been retested multiple times as stronger zones.")
breakFlipLogic = input.bool(true, "Enable Break/Flip Logic", group=group_zm, tooltip="Flip zone colors when price decisively breaks through them, showing invalidated zones.")
sensitivityMode = input.bool(false, "Enable Sensitivity Mode", group=group_zm, tooltip="Enable dynamic sensitivity adjustment for different market conditions.")
sensitivityMult = input.float(1.0, "Sensitivity Multiplier", minval=0.1, maxval=3.0, group=group_zm, tooltip="Multiplier for swing length sensitivity. 1.0 = normal, <1.0 = more sensitive, >1.0 = less sensitive.")

// Moving Averages Section
var group_ma = "Moving Averages"
showEMA200 = input.bool(true, "Show EMA 200", group=group_ma, tooltip="Display the 200-period Exponential Moving Average. Color changes based on price position.")

// VWAP Section
var group_vwap = "VWAP & Deviations"
showVWAP   = input.bool(false, "Show VWAP + Deviations", group=group_vwap, tooltip="Display Volume Weighted Average Price and its standard deviation bands.")
vwapSrc    = input.source(close, "VWAP Source", group=group_vwap, tooltip="Price source for VWAP calculation. Default is close price.")
vwapDevOn  = input.bool(true, "Show Deviation Bands", group=group_vwap, tooltip="Show standard deviation bands around VWAP for volatility analysis.")
vwapDevSet = input.string("Daily", "VWAP Reset", options=["Session", "Daily", "Weekly", "Monthly"], group=group_vwap, tooltip="When to reset VWAP calculation. Daily = reset each trading day.")
devSteps   = input.string("0.5,1,1.5,2", "Deviation Multipliers (comma separated)", group=group_vwap, tooltip="Standard deviation multipliers for VWAP bands. Separate with commas.")
customDevProfiles = input.bool(false, "Enable Custom Deviation Profiles", group=group_vwap, tooltip="Use different deviation profiles for scalping vs swing trading.")
scalpProfile = input.string("0.25,0.5,1.0", "Scalp Profile (comma separated)", group=group_vwap, tooltip="Tighter deviation bands for scalping strategies.")
swingProfile = input.string("1.5,2.0,2.5", "Swing Profile (comma separated)", group=group_vwap, tooltip="Wider deviation bands for swing trading strategies.")
vwapConfluence = input.bool(false, "Enable VWAP Confluence Signals", group=group_vwap, tooltip="Highlight areas where EMA200, VWAP, and supply/demand zones overlap for high-probability setups.")

// RSI & Oscillators Section
var group_rsi = "RSI & Oscillators"
showRSI    = input.bool(false, "Overlay RSI signals", group=group_rsi, tooltip="Color bars based on RSI levels. Red when RSI > upper threshold, green when RSI < lower threshold.")
rsiLen     = input.int(14, "RSI Length", group=group_rsi, tooltip="Period for RSI calculation. Standard is 14, lower = more sensitive, higher = smoother.")
rsiLowerThr = input.int(30, "RSI Lower Threshold", minval=0, maxval=50, group=group_rsi, tooltip="RSI level below which bars turn green. Standard oversold level is 30.")
rsiUpperThr = input.int(70, "RSI Upper Threshold", minval=50, maxval=100, group=group_rsi, tooltip="RSI level above which bars turn red. Standard overbought level is 70.")
rsiMaxIntensity = input.int(100, "RSI Max Intensity (0-100)", minval=1, maxval=100, group=group_rsi, tooltip="Maximum color intensity for RSI bar coloring. Currently unused with simple red/green.")
rsiDivergence = input.bool(false, "Enable RSI Divergence Detection", group=group_rsi, tooltip="Draw lines when price makes new highs/lows but RSI doesn't, indicating potential reversals.")

// Bollinger Bands Section
var group_bb = "Bollinger Bands"
showBB     = input.bool(false, "Show Bollinger Bands", group=group_bb, tooltip="Display Bollinger Bands with moving average and standard deviation bands.")
bbLen      = input.int(20, "BB Length", group=group_bb, tooltip="Period for Bollinger Band calculation. Standard is 20.")
bbMult     = input.float(2.0, "BB Multiplier", group=group_bb, tooltip="Standard deviation multiplier for Bollinger Bands. 2.0 = 95% of price action within bands.")

// Trend Oscillator Section
var group_to = "Trend Oscillator"
showTO     = input.bool(true, "Show Trend Oscillator", group=group_to, tooltip="Display MACD-style trend oscillator in separate pane with histogram.")
toFastLen  = input.int(34, "TO Fast EMA", group=group_to, tooltip="Fast EMA period for trend oscillator calculation.")
toSlowLen  = input.int(55, "TO Slow EMA", group=group_to, tooltip="Slow EMA period for trend oscillator calculation.")
toSignal   = input.int(9, "TO Signal EMA", group=group_to, tooltip="Signal line EMA period for trend oscillator.")

// Volume Analysis Section
var group_vol = "Volume Analysis"
showVRVP          = input.bool(false, "Show Visible Range Volume Profile", group=group_vol, tooltip="Display volume profile as horizontal bars showing volume distribution across price levels.")
vrvpLookbackBars  = input.int(200, "VRVP Lookback Bars", minval=10, maxval=5000, group=group_vol, tooltip="Number of bars to analyze for volume profile calculation.")
vrvpBins          = input.int(24, "VRVP Price Bins", minval=10, maxval=200, group=group_vol, tooltip="Number of price levels to divide the range into for volume analysis.")
vrvpMaxWidthBars  = input.int(50, "VRVP Max Width (bars)", minval=5, maxval=200, group=group_vol, tooltip="Maximum width of volume profile bars in bars.")

// ADR Section
var group_adr = "Average Daily Range (ADR)"
showADR    = input.bool(true, "Show NY Session ADR", group=group_adr, tooltip="Display Average Daily Range based on New York trading session with current session high/low lines.")
adrLen     = input.int(14, "ADR Length (NY sessions)", minval=1, group=group_adr, tooltip="Number of completed NY sessions to average for ADR calculation.")
nySession  = input.session("0930-1600", "NY Session (chart timezone)", group=group_adr, tooltip="New York trading session times in your chart's timezone.")

// Visualization Section
var group_vis = "Visualization"
zoneStyles = input.bool(false, "Enable Zone Style Options", group=group_vis, tooltip="Allow customization of zone appearance (filled vs dashed outline).")
zoneStyle = input.string("Filled", "Zone Style", options=["Filled", "Dashed Outline"], group=group_vis, tooltip="Visual style for supply/demand zones.")
transparencySlider = input.bool(false, "Enable Transparency Slider", group=group_vis, tooltip="Allow dynamic transparency adjustment for zones.")
zoneTransparency = input.int(80, "Zone Transparency", minval=0, maxval=95, group=group_vis, tooltip="Transparency level for zones. 0 = opaque, 95 = very transparent.")
htfLabels = input.bool(false, "Show HTF Zone Labels", group=group_vis, tooltip="Display small text labels on higher timeframe zones (e.g., '1H Supply', '4H Demand').")

// Automation Section
var group_auto = "Automation & Alerts"
scalpAlerts = input.bool(false, "Enable Scalp Alerts", group=group_auto, tooltip="Alert when price touches fresh demand zone + RSI oversold + near VWAP band.")
trendFilter = input.bool(false, "Enable Trend Filter", group=group_auto, tooltip="Only show demand zones in uptrends and supply zones in downtrends to avoid counter-trend traps.")
liquiditySweep = input.bool(false, "Enable Liquidity Sweep Detection", group=group_auto, tooltip="Detect wicks into zones with rejection for potential scalp triggers.")

// Trading Signals Section
var group_signals = "Trading Signals"
showBuySell = input.bool(true, "Show Buy/Sell Indicators", group=group_signals, tooltip="Display buy signals (price < EMA200 + RSI < 30) and sell signals (price > EMA200 + RSI > 70).")

// =============================
// === Core Logic
// =============================

// EMA200 (high transparency like SR boxes)
ema200 = ta.ema(close, 200)
ema200BaseColor = close > ema200 ? color.red : color.green
ema200Color = color.new(ema200BaseColor, 80)
plot(showEMA200 ? ema200 : na, "EMA 200", color=ema200Color, linewidth=2, display=display.pane)

// VWAP core (built-in)
vwap = ta.vwap(vwapSrc)
plot(showVWAP ? vwap : na, "VWAP", color=color.blue, linewidth=2, display=display.pane)

// VWAP Deviations (std dev bands)
devList = str.split(devSteps, ",")
devStdev = ta.stdev(vwapSrc, 100)

// Safe access for deviation steps
f_getStep(list, idx) =>
    array.size(list) > idx ? str.tonumber(array.get(list, idx)) : na

// Parse deviation steps safely
step0 = f_getStep(devList, 0)
step1 = f_getStep(devList, 1)
step2 = f_getStep(devList, 2)
step3 = f_getStep(devList, 3)

// Plot VWAP deviation bands at root level
plot(showVWAP and vwapDevOn and not na(step0) ? vwap + step0 * devStdev : na, "VWAP +0.5", color=color.new(color.blue, 60), display=display.pane)
plot(showVWAP and vwapDevOn and not na(step0) ? vwap - step0 * devStdev : na, "VWAP -0.5", color=color.new(color.blue, 60), display=display.pane)

plot(showVWAP and vwapDevOn and not na(step1) ? vwap + step1 * devStdev : na, "VWAP +1.0", color=color.new(color.blue, 60), display=display.pane)
plot(showVWAP and vwapDevOn and not na(step1) ? vwap - step1 * devStdev : na, "VWAP -1.0", color=color.new(color.blue, 60), display=display.pane)

plot(showVWAP and vwapDevOn and not na(step2) ? vwap + step2 * devStdev : na, "VWAP +1.5", color=color.new(color.blue, 60), display=display.pane)
plot(showVWAP and vwapDevOn and not na(step2) ? vwap - step2 * devStdev : na, "VWAP -1.5", color=color.new(color.blue, 60), display=display.pane)

plot(showVWAP and vwapDevOn and not na(step3) ? vwap + step3 * devStdev : na, "VWAP +2.0", color=color.new(color.blue, 60), display=display.pane)
plot(showVWAP and vwapDevOn and not na(step3) ? vwap - step3 * devStdev : na, "VWAP -2.0", color=color.new(color.blue, 60), display=display.pane)

// Bollinger Bands
basis = ta.sma(close, bbLen)
dev   = ta.stdev(close, bbLen)
upper = basis + bbMult * dev
lower = basis - bbMult * dev

plot(showBB ? basis : na, "BB Basis", color=color.gray, display=display.pane)
plot(showBB ? upper : na, "BB Upper", color=color.green, display=display.pane)
plot(showBB ? lower : na, "BB Lower", color=color.red, display=display.pane)

// RSI (overlay via barcolor) simple red/green (no transparency)
rsi = ta.rsi(close, rsiLen)
rsiColor = rsi > rsiUpperThr ? color.red : rsi < rsiLowerThr ? color.green : na
barcolor(showRSI ? rsiColor : na)

// =============================
// === Buy/Sell Indicators
// =============================

// Buy signal: price below EMA200 AND RSI below 30
buyCondition = close < ema200 and rsi < 30
buyTrigger = buyCondition and not buyCondition[1]  // Only trigger on first bar of condition

// Sell signal: price above EMA200 AND RSI above 70  
sellCondition = close > ema200 and rsi > 70
sellTrigger = sellCondition and not sellCondition[1]  // Only trigger on first bar of condition

// Plot buy/sell indicators
plotshape(showBuySell and buyTrigger, "Buy Signal", shape.triangleup, location.belowbar, color.green, size=size.normal, text="BUY")
plotshape(showBuySell and sellTrigger, "Sell Signal", shape.triangledown, location.abovebar, color.red, size=size.normal, text="SELL")

// =============================
// === Trend Oscillator (MACD-style)
// =============================

toFast = ta.ema(close, toFastLen)
toSlow = ta.ema(close, toSlowLen)
toMacd = toFast - toSlow
toSig  = ta.ema(toMacd, toSignal)
toHist = toMacd - toSig

plot(showTO ? toMacd : na, "TO MACD", color=color.new(color.blue, 0), display=display.pane)
plot(showTO ? toSig  : na, "TO Signal", color=color.new(color.orange, 0), display=display.pane)
plot(showTO ? toHist : na, "TO Hist", style=plot.style_columns, color=toHist >= 0 ? color.new(color.green, 0) : color.new(color.red, 0), display=display.pane)

// =============================
// === Supply/Demand Zones (fractal-based)
// =============================

// =============================
// === ADR (NY Session) - Range and Average of last N sessions
// =============================

// Detect NY session on the chart timeframe
inNY = not na(time(timeframe.period, nySession))
isNYStart = inNY and not inNY[1]
isNYEnd   = not inNY and inNY[1]

// Track current NY session high/low
var float nyHigh = na
var float nyLow  = na

if isNYStart
    nyHigh := high
    nyLow  := low
else if inNY
    nyHigh := na(nyHigh) ? high : math.max(nyHigh, high)
    nyLow  := na(nyLow)  ? low  : math.min(nyLow, low)

// Maintain rolling array of completed NY session ranges
var float[] nyRanges = array.new_float()

if isNYEnd and showADR
    completedRange = nyHigh - nyLow
    if not na(completedRange) and completedRange >= 0
        array.push(nyRanges, completedRange)
        // cap to adrLen
        if array.size(nyRanges) > adrLen
            array.shift(nyRanges)

// Compute ADR = average of nyRanges
f_arrayAvg(arr) =>
    sz = array.size(arr)
    if sz == 0
        na
    else
        total = 0.0
        for i = 0 to sz - 1
            total += array.get(arr, i)
        total / sz

adrValue = f_arrayAvg(nyRanges)
todayNYRange = inNY or isNYEnd ? (nyHigh - nyLow) : na

// Plots for current NY session High/Low
plot(showADR and inNY ? nyHigh : na, "NY Session High", color=color.new(color.purple, 0), linewidth=1)
plot(showADR and inNY ? nyLow  : na, "NY Session Low",  color=color.new(color.purple, 0), linewidth=1)

// Small info table (top-right) with ADR and today's NY range
var table adrTable = table.new(position.top_right, 1, 2)
if barstate.islast and showADR
    hdr = "NY ADR(" + str.tostring(adrLen) + ")"
    val = (na(adrValue) ? "n/a" : str.tostring(adrValue, format.mintick)) + " | Today: " + (na(todayNYRange) ? "n/a" : str.tostring(todayNYRange, format.mintick))
    table.cell(adrTable, 0, 0, hdr, text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 0))
    table.cell(adrTable, 0, 1, val, text_color=color.white, text_size=size.small, bgcolor=color.new(color.black, 70))

// =============================
// === Visible Range Volume Profile (approximation)
// =============================

var box[] vrvpBoxes = array.new<box>()

f_clearVRVP() =>
    for i = array.size(vrvpBoxes) - 1 to 0
        b = array.get(vrvpBoxes, i)
        box.delete(b)
        array.remove(vrvpBoxes, i)

f_drawVRVP(lookbackBars, bins, maxWidthBars) =>
    canRun = lookbackBars > 0 and bins > 1
    if canRun
        lb = math.min(lookbackBars, bar_index)
        // Determine price range in lookback
        lookHigh = ta.highest(high, lb)
        lookLow  = ta.lowest(low, lb)
        validRange = not na(lookHigh) and not na(lookLow) and lookHigh != lookLow
        if validRange
            step = (lookHigh - lookLow) / bins
            // Avoid divide-by-zero
            if step > 0
                var float[] volBins = array.new_float(bins, 0.0)
                // Accumulate volume per bin
                for i = 0 to lb - 1
                    price = close[i]
                    v = volume[i]
                    idx = math.floor((price - lookLow) / step)
                    idx := idx < 0 ? 0 : idx > bins - 1 ? bins - 1 : idx
                    array.set(volBins, idx, array.get(volBins, idx) + v)
                // Find max volume for normalization
                maxVol = 0.0
                for k = 0 to bins - 1
                    maxVol := math.max(maxVol, array.get(volBins, k))
                if maxVol > 0 and barstate.islast
                    // Clear previous
                    f_clearVRVP()
                    // Draw boxes as horizontal bars
                    leftX = bar_index - lb
                    for k = 0 to bins - 1
                        binLow  = lookLow + k * step
                        binHigh = binLow + step
                        ratio = array.get(volBins, k) / maxVol
                        widthBars = math.floor(ratio * maxWidthBars)
                        if widthBars > 0
                            b = box.new(left=leftX, right=leftX + widthBars, top=binHigh, bottom=binLow, xloc=xloc.bar_index, bgcolor=color.new(color.gray, 80), border_color=na)
                            array.push(vrvpBoxes, b)

if showVRVP
    f_drawVRVP(vrvpLookbackBars, vrvpBins, vrvpMaxWidthBars)

f_swingHigh(len) =>
    high[len] == ta.highest(high, len * 2 + 1)

f_swingLow(len) =>
    low[len] == ta.lowest(low, len * 2 + 1)

var box[] demandZones = array.new<box>()
var box[] supplyZones = array.new<box>()

if showSD
    if f_swingHigh(sdLen)
        zoneHeight = high[sdLen] - low[sdLen]
        if zoneHeight > 0
            topVal = high[sdLen]
            bottomVal = srFullRange ? low[sdLen] : high[sdLen] - zoneHeight / 2
            maxExtend = math.min(srExtendBars, 500)
            newBox = box.new(left=bar_index - sdLen, top=topVal, right=bar_index + maxExtend, bottom=bottomVal, border_color=na, bgcolor=color.new(color.red, 80))
            array.push(supplyZones, newBox)
    if f_swingLow(sdLen)
        zoneHeight = high[sdLen] - low[sdLen]
        if zoneHeight > 0
            topVal = srFullRange ? high[sdLen] : low[sdLen] + zoneHeight / 2
            bottomVal = low[sdLen]
            maxExtend = math.min(srExtendBars, 500)
            newBox = box.new(left=bar_index - sdLen, top=topVal, right=bar_index + maxExtend, bottom=bottomVal, border_color=na, bgcolor=color.new(color.green, 80))
            array.push(demandZones, newBox)

// Clean up old zones when broken (reverse loop to avoid index issues)
if array.size(supplyZones) > 0
    for i = array.size(supplyZones) - 1 to 0
        b = array.get(supplyZones, i)
        if close > box.get_top(b)
            box.delete(b)
            array.remove(supplyZones, i)

if array.size(demandZones) > 0
    for i = array.size(demandZones) - 1 to 0
        b = array.get(demandZones, i)
        if close < box.get_bottom(b)
            box.delete(b)
            array.remove(demandZones, i)

// =============================
// === Higher Timeframe Zones
// =============================

var line[] htfLines = array.new<line>()

f_drawHTFZones(tf, col) =>
    htfHigh = request.security(syminfo.tickerid, tf, high)
    htfLow  = request.security(syminfo.tickerid, tf, low)
    
    // Clean up old lines first
    if array.size(htfLines) > 0
        for i = array.size(htfLines) - 1 to 0
            line.delete(array.get(htfLines, i))
            array.remove(htfLines, i)
    
    // Create new lines
    highLine = line.new(bar_index - 50, htfHigh, bar_index, htfHigh, color=col, extend=extend.right, style=line.style_dashed)
    lowLine = line.new(bar_index - 50, htfLow, bar_index, htfLow, color=col, extend=extend.right, style=line.style_dashed)
    
    array.push(htfLines, highLine)
    array.push(htfLines, lowLine)

if showSD
    f_drawHTFZones(sdHTF1, color.new(color.red, 70))
    f_drawHTFZones(sdHTF2, color.new(color.green, 70))

    //end script
